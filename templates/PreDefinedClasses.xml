<templateSet group="PreDefinedClasses">
  <template name="Fragment" value="import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.databinding.DataBindingUtil&#10;&#10;class $FragmentName$:$InheritedFragment$() {&#10;    lateinit var binding: $FragmentName$Binding&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {&#10;        binding = DataBindingUtil.inflate(inflater, R.layout.$resource$,container,false)&#10;        return binding.root&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="FragmentName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="InheritedFragment" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="resource" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="ProgressBar" value="&lt;include&#10;                android:id=&quot;@+id/progressBar&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                layout=&quot;@layout/$progress_bar_layout$&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;                app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                android:visibility=&quot;gone&quot;/&gt;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="progress_bar_layout" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="BaseActivity" value="abstract class BaseActivity&lt;T : ViewDataBinding&gt;:AppCompatActivity(){&#10;&#10;    private lateinit var viewDataBinding: T&#10;&#10;&#10;&#10;    abstract fun getLayoutId(): Int&#10;&#10;    fun getViewDataBinding(): T {&#10;        return viewDataBinding&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        performDataBinding()&#10;        setLayoutDirection(this)&#10;        setLocaleLanguage(getLanguage()!!)&#10;    }&#10;    private fun performDataBinding() {&#10;        viewDataBinding = DataBindingUtil.setContentView(this, getLayoutId())&#10;&#10;        viewDataBinding!!.executePendingBindings()&#10;    }&#10;&#10;&#10;    open fun setLocaleLanguage(lang: String) {&#10;        val myLocale = Locale(lang)&#10;        val res = resources&#10;        val dm = res.displayMetrics&#10;        val conf = res.configuration&#10;&#10;        if (conf.locale !== myLocale) {&#10;            conf.locale = myLocale&#10;        } else {&#10;//            Toast.makeText(getActivity(), R.string.no_changes, Toast.LENGTH_SHORT).show();&#10;            return&#10;        }&#10;        res.updateConfiguration(conf, dm)&#10;        val preferencesLang = getSharedPreferences(ConstantPrefrencesKeys.LANGUAGE_PREFRENCES_KEY, 0)&#10;        val editor = preferencesLang.edit()&#10;        editor.putString(ConstantPrefrencesKeys.LANGUAGE_KEY, lang)&#10;        editor.apply()&#10;&#10;//        ConstantsUser.LANGUAGE = lang&#10;    }&#10;&#10;    private fun setUserLanguage(language: String,sharedPreferences: SharedPreferences){&#10;        val editor = sharedPreferences.edit()&#10;        editor.putString(ConstantPrefrencesKeys.LANGUAGE_KEY, language)&#10;        editor.apply()&#10;    }&#10;&#10;    open fun getLanguage():String?{&#10;        val preferencesLang = getSharedPreferences(ConstantPrefrencesKeys.LANGUAGE_PREFRENCES_KEY, 0)&#10;        val lang = preferencesLang.getString(ConstantPrefrencesKeys.LANGUAGE_KEY, null)&#10;        if (lang.isNullOrEmpty())&#10;        {&#10;            setUserLanguage(ConstantPrefrencesKeys.LANGUAGE_ENGLISH_VALUE, preferencesLang)&#10;            return ConstantPrefrencesKeys.LANGUAGE_ENGLISH_VALUE&#10;        }&#10;        else&#10;            return preferencesLang.getString(ConstantPrefrencesKeys.LANGUAGE_KEY, null)&#10;    }&#10;&#10;&#10;    private fun setLayoutDirection(activity: AppCompatActivity){&#10;//        val preferencesLang = getSharedPreferences(ConstantPrefrencesKeys.LANGUAGE_PREFRENCES_KEY, 0)&#10;        var lang = getLanguage()&#10;&#10;&#10;        if (lang == null)&#10;            lang = ConstantPrefrencesKeys.LANGUAGE_ENGLISH_VALUE&#10;&#10;&#10;        if (lang!!.contains(&quot;ar&quot;)) {&#10;            window.decorView.layoutDirection = View.LAYOUT_DIRECTION_RTL&#10;&#10;        } else {&#10;            window.decorView.layoutDirection = View.LAYOUT_DIRECTION_LTR&#10;        }&#10;&#10;    }&#10;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="Adapter" value="import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.databinding.DataBindingUtil&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;class $AdapterName$: RecyclerView.Adapter&lt;$AdapterName$.$ViewHolderName$&gt;() {&#10;&#10;    var mlist = listOf&lt;$list$&gt;()&#10;&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): $ViewHolderName$ {&#10;        var itemBinding:$ItemName$ = DataBindingUtil.inflate(LayoutInflater.from(parent.context), R.layout.$resource$, parent, false)&#10;        return  $ViewHolderName$(itemBinding.root, itemBinding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: $ViewHolderName$, position: Int) {&#10;&#10;    }&#10;    &#10;   fun setList(mlist:List&lt;$list$&gt;){&#10;        this.mlist = mlist&#10;    }&#10;&#10;    override fun getItemCount(): Int {&#10;        return mlist.size&#10; }&#10;&#10;    class $ViewHolderName$(itemView: View, itemRowBinding: $ItemName$) : RecyclerView.ViewHolder(itemView) {&#10;        var itemRowBinding: $ItemName$ = itemRowBinding&#10;    }&#10;    &#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="AdapterName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ViewHolderName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ItemName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="resource" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>